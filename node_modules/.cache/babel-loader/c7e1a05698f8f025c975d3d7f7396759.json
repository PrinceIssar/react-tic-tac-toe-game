{"ast":null,"code":"var _jsxFileName = \"/Users/princeissar/git/BeCode/React-Projects/tictac/src/Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Clear from './icon/clear.png';\nimport Done from './icon/done.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  // Game is functional component to save data we need useSate , it provide value , and to set the value\n  const [board, markPositionOnBoard] = useState([[], [], []]); // 2D array : it has array which has array type array,\n  // a array which has 3 elements(first array represents the horizontal way and second array represent the 2nd horizontal array)\n\n  const [player, setPlayer] = useState(0); //by default the 0 player means the first player will work\n\n  const [winner, setWinner] = useState(); // declare handlePress\n\n  const handlePress = (row, column) => {\n    // the value of 0 ,0 or other needs to store in board and how to preserve it\n    const newBoard = board.slice(); // this will just copy the same array and gives us back with new ref,\n    // we'll change it with it's handler(markPositionOnBoard) ,not directly any modification\n    // verify first\n\n    if (newBoard[row][column] === undefined) {\n      // that means any user move can work here\n      newBoard[row][column] = player; //which player is working, first player will work first\n\n      markPositionOnBoard(newBoard); // replace the old board to new board with latest\n\n      if (isGameOvered()) {\n        setWinner(player);\n      } else {\n        setPlayer(1 - player);\n      }\n    }\n  };\n\n  const isGameOvered = () => {\n    return rowCrossed() || columnCrossed() || diagonalCrossed();\n  }; // logic for if 3 row ,column ,diagonal way it'll check if it's true then it'll be game over\n  // ROW\n\n\n  const rowCrossed = () => {\n    for (let i = 0; i < 3; i++) {\n      if (board[i][0] === board[i][1] && board[i][1] === board[i][2] && board[i][0] !== undefined) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // COLUMN\n\n\n  const columnCrossed = () => {\n    for (let j = 0; j < 3; j++) {\n      if (board[0][j] === board[1][j] && board[1][j] === board[2][j] && board[0][j] !== undefined) {\n        return true;\n      }\n    }\n\n    return false;\n  }; //DIAGONAL\n\n\n  const diagonalCrossed = () => {\n    if (board[0][0] === board[1][1] && board[1][1] === board[2][2] && board[0][0] !== undefined) {\n      return true;\n    }\n\n    if (board[0][2] === board[1][1] && board[1][1] === board[2][0] && board[0][2] !== undefined) {\n      return true;\n    }\n\n    return false;\n  }; // to show the image we write a function getBoxView,which will return a jsx\n\n\n  const getBoxView = (row, column) => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [board[row][column] === 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: Clear,\n      alt: \"empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 42\n    }, this), board[row][column] === 1 && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: Done,\n      alt: \"empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 43\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TIC TAC TOE GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear\",\n          children: \"START NEW GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player1 \" + (player === 0 ? 'turn' : 'wait'),\n          children: \"Player 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player2 \" + (player === 1 ? 'turn' : 'wait'),\n          children: \"Player 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner\",\n        children: [\"Player \", winner + 1, \" won this game\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(0, 0),\n                children: [\"  \", getBoxView(0, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(0, 1),\n                children: [getBoxView(0, 1), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(0, 2),\n                children: [\" \", getBoxView(0, 2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(1, 0),\n                children: [\" \", getBoxView(1, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(1, 1),\n                children: [\" \", getBoxView(1, 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(1, 2),\n                children: [\" \", getBoxView(1, 2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(2, 0),\n                children: [\" \", getBoxView(2, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(2, 1),\n                children: [\" \", getBoxView(2, 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handlePress(2, 2),\n                children: [\" \", getBoxView(2, 2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"MLABxBv/bMGVApPjTCOUJCCW6wc=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/princeissar/git/BeCode/React-Projects/tictac/src/Game.jsx"],"names":["React","useState","Clear","Done","Game","board","markPositionOnBoard","player","setPlayer","winner","setWinner","handlePress","row","column","newBoard","slice","undefined","isGameOvered","rowCrossed","columnCrossed","diagonalCrossed","i","j","getBoxView"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Clear from './icon/clear.png';\nimport Done from './icon/done.png';\n\nconst Game = () => {\n    // Game is functional component to save data we need useSate , it provide value , and to set the value\n    const [board, markPositionOnBoard] = useState([[],[],[]]); // 2D array : it has array which has array type array,\n\n    // a array which has 3 elements(first array represents the horizontal way and second array represent the 2nd horizontal array)\n    const [player, setPlayer] = useState(0); //by default the 0 player means the first player will work\n\n    const [winner,setWinner] = useState();\n\n    // declare handlePress\n    const handlePress = (row,column) => {\n        // the value of 0 ,0 or other needs to store in board and how to preserve it\n        const newBoard = board.slice(); // this will just copy the same array and gives us back with new ref,\n        // we'll change it with it's handler(markPositionOnBoard) ,not directly any modification\n        // verify first\n        if (newBoard[row][column] === undefined){ // that means any user move can work here\n            newBoard[row][column] = player //which player is working, first player will work first\n             markPositionOnBoard(newBoard); // replace the old board to new board with latest\n            if(isGameOvered()){\n                setWinner(player);\n            }else {\n                setPlayer(1 - player);\n            }\n        }\n    };\n\n    const isGameOvered = () => {\n        return rowCrossed() || columnCrossed() || diagonalCrossed();\n    }\n    // logic for if 3 row ,column ,diagonal way it'll check if it's true then it'll be game over\n    // ROW\n    const rowCrossed = ()=>{\n        for(let i = 0; i<3; i++){\n            if (board[i][0] === board[i][1] &&\n                board[i][1] === board[i][2] &&\n                board[i][0] !== undefined\n            ) {\n                return true;\n            }\n        }\n        return false\n    };\n\n    // COLUMN\n    const columnCrossed = () => {\n        for(let j = 0; j < 3; j++){\n            if(\n                board[0][j] === board[1][j] &&\n                board[1][j] === board[2][j] &&\n                board[0][j] !== undefined\n            ){\n                return true;\n            }\n        }\n        return false;\n    };\n\n    //DIAGONAL\n    const diagonalCrossed = () => {\n        if(\n            board[0][0] === board[1][1] &&\n            board[1][1] === board[2][2] &&\n            board[0][0] !== undefined\n        ){\n            return true;\n        }\n        if (\n            board[0][2] === board[1][1] &&\n            board[1][1] === board[2][0] &&\n            board[0][2] !== undefined\n        ){\n            return true;\n        }\n        return false;\n    };\n\n\n\n\n    // to show the image we write a function getBoxView,which will return a jsx\n    const getBoxView = (row,column) => (\n        <>\n            {/*it's played from first player then it'll show the img*/}\n            {board[row][column] === 0 && <img src={Clear} alt=\"empty\" />}\n            {board[row][column] === 1 &&  <img src={Done} alt=\"empty\" />}\n        </>\n    )\n    return (\n        <div className=\"container\">\n            <h1>TIC TAC TOE GAME</h1>\n            <div>\n                <div className=\"controls\">\n                    <button className=\"clear\">START NEW GAME</button>\n                </div>\n                <div className=\"player\">\n                    {/*it'll change the color if it's true , turny operator*/}\n                    <div className={\"player1 \" + (player === 0 ? 'turn' : 'wait')}>Player 1\n                    </div>\n                    <div className={\"player2 \" + (player === 1 ? 'turn': 'wait')}>Player 2\n                    </div>\n                </div>\n                {/* this will show the winner*/}\n                {winner && <div className=\"winner\">Player {(winner + 1) } won this game</div>}\n                <div className=\"table_wrapper\">\n                    <table>\n                        <tbody>\n                        {/*this represents the first row , and 0 is the first index and 0.1 second and so on */}\n                        <tr>\n                            <td onClick={()=> handlePress(0,0)}>  {getBoxView(0,0)}</td>\n                            {/*to show the image we write a function getBoxView,which will return a jsx*/}\n\n                            <td onClick={()=> handlePress(0,1)}>{getBoxView(0,1)} </td>\n                            <td onClick={()=> handlePress(0,2)}> {getBoxView(0,2)}</td>\n                        </tr>\n                        <tr>\n                            {/* 1 means first row , 0 means 2nd column*/}\n                            <td onClick={()=> handlePress(1,0)}> {getBoxView(1,0)}</td>\n                            <td onClick={()=> handlePress(1,1)}> {getBoxView(1,1)}</td>\n                            <td onClick={()=> handlePress(1,2)}> {getBoxView(1,2)}</td>\n                        </tr>\n                        <tr>\n                            <td onClick={()=> handlePress(2,0)}> {getBoxView(2,0)}</td>\n                            <td onClick={()=> handlePress(2,1)}> {getBoxView(2,1)}</td>\n                            <td onClick={()=> handlePress(2,2)}> {getBoxView(2,2)}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}